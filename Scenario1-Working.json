{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Sample Template that creates VPC, Subnets, EC2 Instance, RDS Instance and respective security groups. **WARNING** Please ensure you create a keypair beforehand that you can use with Instance here.",
    "Parameters": {
      "KeyName": {
        "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
        "Type": "AWS::EC2::KeyPair::KeyName",
        "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
      },
      "InstanceType": {
        "Description": "WebServer EC2 instance type",
        "Type": "String",
        "Default": "t2.medium",
        "AllowedValues": ["t1.micro","t2.nano","t2.micro","t2.small","t2.medium","t2.large","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.medium","m3.large","m3.xlarge","m3.2xlarge","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","c1.medium","c1.xlarge","c3.large","c3.xlarge",
        "c3.2xlarge","c3.4xlarge","c3.8xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","g2.2xlarge","g2.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
        "i2.2xlarge","i2.4xlarge","i2.8xlarge","d2.xlarge","d2.2xlarge","d2.4xlarge","d2.8xlarge","hi1.4xlarge","hs1.8xlarge","cr1.8xlarge","cc2.8xlarge","cg1.4xlarge"
        ],
        "ConstraintDescription": "must be a valid EC2 instance type."
      },
      "SSHLocation": {
        "Description": "The IP address range that can be used to SSH to the EC2 instances",
        "Type": "String",
        "MinLength": "9",
        "MaxLength": "18",
        "Default": "0.0.0.0/0",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "DBName": {
        "Default": "MyDatabase",
        "Description": "The database name",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "64",
        "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
        "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
      },
      "DBUser": {
        "NoEcho": "true",
        "Description": "The database admin account username",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "16",
        "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
        "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
      },
      "DBPassword": {
        "NoEcho": "true",
        "Description": "The database admin account password",
        "Type": "String",
        "MinLength": "8",
        "MaxLength": "41",
        "AllowedPattern": "[a-zA-Z0-9]+",
        "ConstraintDescription": "must contain only alphanumeric characters."
      },
      "DBAllocatedStorage": {
        "Default": "5",
        "Description": "The size of the database (Gb)",
        "Type": "Number",
        "MinValue": "5",
        "MaxValue": "1024",
        "ConstraintDescription": "must be between 5 and 1024Gb."
      }
    },
    "Mappings": {
       "SubnetConfig": {
        "VPC": {
            "CIDR": "10.0.0.0/16"
        },
        "Public1": {
            "CIDR": "10.0.0.0/24"
        },
        "Public2": {
            "CIDR": "10.0.1.0/24"
        }
      }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
              "EnableDnsSupport": "true",
              "EnableDnsHostnames": "true",
              "CidrBlock": {
                "Fn::FindInMap": [
                  "SubnetConfig",
                  "VPC",
                  "CIDR"
                ]
              },
              "Tags": [
                {
                  "Key": "Network",
                  "Value": "Public"
                }
              ]
            }
          },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "CidrBlock": {
                "Fn::FindInMap": [
                  "SubnetConfig",
                  "Public1",
                  "CIDR"
                ]
              },
              "AvailabilityZone" : {
                "Fn::Select" : [ 
                  "0", 
                  { 
                    "Fn::GetAZs" : "" 
                  } 
                ]
              },
              "Tags": [
                {
                  "Key": "Network",
                  "Value": "Public-1"
                }
              ]
            }
          },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "CidrBlock": {
                "Fn::FindInMap": [
                  "SubnetConfig",
                  "Public2",
                  "CIDR"
                ]
              },
              "AvailabilityZone" : {
                "Fn::Select" : [ 
                  "1", 
                  { 
                    "Fn::GetAZs" : "" 
                  } 
                ]
              },
              "Tags": [
                {
                  "Key": "Network",
                  "Value": "Public-2"
                }
              ]
            }
          },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
              "Tags": [
                {
                  "Key": "Network",
                  "Value": "Public"
                }
              ]
            }
          },
        "GatewayToInternet": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "InternetGatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "Tags": [
                {
                  "Key": "Network",
                  "Value": "Public"
                }
              ]
            }
          },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayToInternet",
            "Properties": {
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
        "PublicSubnetRouteTableAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PublicSubnet1"
              },
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              }
            }
          },
        "PublicSubnetRouteTableAssociation2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PublicSubnet2"
              },
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              }
            }
          },
        "PublicNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "Tags": [
                {
                  "Key": "Network",
                  "Value": "Public"
                }
              ]
            }
          },
        "InboundHTTPPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
              "NetworkAclId": {
                "Ref": "PublicNetworkAcl"
              },
              "RuleNumber": "100",
              "Protocol": "6",
              "RuleAction": "allow",
              "Egress": "false",
              "CidrBlock": "0.0.0.0/0",
              "PortRange": {
                "From": "80",
                "To": "80"
              }
            }
          },
        "InboundHTTPSPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
              "NetworkAclId": {
                "Ref": "PublicNetworkAcl"
              },
              "RuleNumber": "101",
              "Protocol": "6",
              "RuleAction": "allow",
              "Egress": "false",
              "CidrBlock": "0.0.0.0/0",
              "PortRange": {
                "From": "443",
                "To": "443"
              }
            }
          },
        "InboundSSHPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
              "NetworkAclId": {
                "Ref": "PublicNetworkAcl"
              },
              "RuleNumber": "102",
              "Protocol": "6",
              "RuleAction": "allow",
              "Egress": "false",
              "CidrBlock": {
                "Ref": "SSHLocation"
              },
              "PortRange": {
                "From": "22",
                "To": "22"
              }
            }
          },
        "InboundEphemeralPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
              "NetworkAclId": {
                "Ref": "PublicNetworkAcl"
              },
              "RuleNumber": "103",
              "Protocol": "6",
              "RuleAction": "allow",
              "Egress": "false",
              "CidrBlock": "0.0.0.0/0",
              "PortRange": {
                "From": "1024",
                "To": "65535"
              }
            }
          },
        "OutboundPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
              "NetworkAclId": {
                "Ref": "PublicNetworkAcl"
              },
              "RuleNumber": "100",
              "Protocol": "6",
              "RuleAction": "allow",
              "Egress": "true",
              "CidrBlock": "0.0.0.0/0",
              "PortRange": {
                "From": "0",
                "To": "65535"
              }
            }
          },
        "PublicSubnetNetworkAclAssociation1": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PublicSubnet1"
              },
              "NetworkAclId": {
                "Ref": "PublicNetworkAcl"
              }
            }
          },  
        "PublicSubnetNetworkAclAssociation2": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PublicSubnet2"
              },
              "NetworkAclId": {
                "Ref": "PublicNetworkAcl"
              }
            }
          },
        "EC2Instance": {
           "Type": "AWS::EC2::Instance",
           "DependsOn": "GatewayToInternet",
           "Properties": {
              "InstanceType": {
                "Ref": "InstanceType"
              },
              "KeyName": {
                "Ref": "KeyName"
              },
              "ImageId": "ami-09479453c5cde9639",
              "NetworkInterfaces": [
                  {
                    "GroupSet": [
                  {
                    "Ref": "InstanceSecurityGroup"
                  }
                ],
                    "AssociatePublicIpAddress": "true",
                    "DeviceIndex": "0",
                    "DeleteOnTermination": "true",
                    "SubnetId": {
                    "Ref": "PublicSubnet1"
                    }
                  }
                ]
        }
          },
        "InstanceSecurityGroup": {
         "Type": "AWS::EC2::SecurityGroup",
         "DependsOn": "VPC",
         "Properties": {
           "GroupDescription": "Enable SSH access via port 22",
           "VpcId": { "Ref" : "VPC" },
           "SecurityGroupIngress": [
            {
              "IpProtocol": "tcp",
              "FromPort": "22",
              "ToPort": "22",
              "CidrIp": { "Ref": "SSHLocation"}
            }
          ]
        }
          },
        "DBSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties" : {
            "GroupDescription": "Open database for access",
            "VpcId": { "Ref" : "VPC" },
            "SecurityGroupIngress" : [
              {
              "IpProtocol" : "tcp",
              "FromPort" : "3306",
              "ToPort" : "3306",
              "SourceSecurityGroupId" : { "Ref": "InstanceSecurityGroup"}
            }
          ]
        }
          },
        "DBSubnetGroup" : {
            "Type" : "AWS::RDS::DBSubnetGroup",
            "Properties" : {
               "DBSubnetGroupDescription" : "Subnet Group for launching RDS DB Instance in a VPC",
               "SubnetIds" : [ {"Ref": "PublicSubnet1"},{"Ref": "PublicSubnet2"}]
        }
          },
        "MasterDB": {
         "Type": "AWS::RDS::DBInstance",
         "DependsOn": "DBSubnetGroup",
         "Properties": {
           "DBName": {
            "Ref": "DBName"
           },
           "AllocatedStorage": {
            "Ref": "DBAllocatedStorage"
           },
           "DBInstanceClass": "db.t2.micro",
           "DBSubnetGroupName" : {"Ref": "DBSubnetGroup"},
           "Engine": "MySQL",
           "MasterUsername": {
            "Ref": "DBUser"
           },
           "MasterUserPassword": {
            "Ref": "DBPassword"
           },
           "Tags": [
            {
              "Key": "Name",
              "Value": "Master Database"
            }
           ],
          "VPCSecurityGroups" : [ { "Fn::GetAtt": [ "DBSecurityGroup", "GroupId" ] } ]  
        },
        "DeletionPolicy": "Snapshot"
          }
    },
    "Outputs": {
      "VPCId": {
        "Description": "VPCId of the newly created VPC",
        "Value": {
            "Ref": "VPC"
        }
      },  
      "PublicSubnet1": {
        "Description": "SubnetId of the public subnet",
        "Value": {
          "Ref": "PublicSubnet2"
        }
      },
      "PublicSubnet2": {
        "Description": "SubnetId of the public subnet",
        "Value": {
          "Ref": "PublicSubnet2"
        }
      },
      "InstanceId": {
        "Description": "InstanceId of the newly created EC2 instance",
        "Value": {
          "Ref": "EC2Instance"
        }
      },
      "PublicIP": {
        "Description": "Public IP address of the newly created EC2 instance",
        "Value": {
          "Fn::GetAtt": [
            "EC2Instance",
            "PublicIp"
          ]
        }
      }
    }
}